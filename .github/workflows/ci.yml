name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: packages/editor-cljs/package.json
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0
      with:
        version: 'latest'
    
    - name: Build WASM module
      run: |
        cd packages/lexicon-engine/wasm
        wasm-pack build --target web --out-dir pkg --release
        # Copy WASM files to ClojureScript public directory
        mkdir -p ../../editor-cljs/resources/public/lexicon-engine/wasm/
        cp -r pkg ../../editor-cljs/resources/public/lexicon-engine/wasm/
    
    - name: Install ClojureScript dependencies
      run: |
        cd packages/editor-cljs
        npm install --no-workspaces
        # Verify React is available
        ls -la node_modules/react/ || echo "React not found in node_modules"
        # Install shadow-cljs globally for reliable access
        npm install -g shadow-cljs
    
    - name: Build ClojureScript frontend
      run: |
        cd packages/editor-cljs
        # Production build with 0 warnings check
        echo "üî® Starting ClojureScript production build..."
        
        # Capture build output for warning analysis
        OUTPUT=$(npm run build 2>&1)
        BUILD_EXIT_CODE=$?
        
        echo "$OUTPUT"
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ ClojureScript production build succeeded!"
          
          # Check for warnings in the build output
          if echo "$OUTPUT" | grep -E "Build completed.*[1-9][0-9]* warnings"; then
            echo "‚ùå ClojureScript compilation warnings detected!"
            exit 1
          else
            echo "‚úÖ Clean ClojureScript production build with 0 warnings!"
          fi
        else
          echo "‚ùå ClojureScript production build failed!"
          echo "Debugging information:"
          echo "Node modules React check:"
          ls -la node_modules/react/ || echo "React not found"
          echo "WASM files check:"
          ls -la resources/public/lexicon-engine/wasm/ || echo "WASM files not found"
          echo "Shadow-cljs version:"
          npx shadow-cljs --version || echo "Shadow-cljs not available"
          echo "Package.json dependencies:"
          cat package.json | grep -A 10 dependencies
          exit 1
        fi